version: '3.4'

# docker-compose-stoqs_mbari_org.yml file to be used for stoqs.mbari.org public STOQS server
# Notable differences from docker-compose.yml used for internal STOQS servers:
# 1. The stoqs campaign databases are remotely accessed from an internal postgres
#    server specified in the .env file via the STOQS_PGHOST variable
# 2. The CAMPAIGNS_MODULE is set to a file for campaigns that are publicly available
# 3. Start containers with:
#    cd /opt/stoqsgit/docker && docker-compose -f docker-compose-stoqs_mbari_org.yml up -d
#    docker-compose -f docker-compose-stoqs_mbari_org.yml logs -f
# 4. The postgres container here is for storing shortened 'Share this view' URLs
#    by the shortener service, it's location for backup is specified in the .env file
# 5. The shortener service code is cloned from https://github.com/MBARIMike/ur_l into
#    /opt/ur_l and started with `docker-compose build ur_l` and `docker-compose up -d`
#    from that directory

volumes:
    static-files:
    media-files:

services:

  mapserver:
    image: mbari/stoqs-mapserver
    build:
        context: .
        dockerfile: Dockerfile-mapserver
    volumes:
      - ${STOQS_VOLS_DIR}/maps:${URL_MAPFILE_DIR}:ro
    container_name: stoqs-mapserver
    # Expose port 80 if PRODUCTION=false - Note: PRODUCTION=false doesn't work (March 2019)
    ##ports:
    ##  - "80:80"
    env_file:
      - ./.env

  stoqs:
    image: mbari/stoqs
    build:
        context: .
        dockerfile: Dockerfile-stoqs
    volumes:
      - ${STOQS_VOLS_DIR}/maps:${MAPFILE_DIR}
      - ${STOQS_VOLS_DIR}/stoqs_root:/root
      - ${STOQS_VOLS_DIR}/nginx:/usr/share/nginx
      - ${STOQS_VOLS_DIR}/pg_dumps:/srv/media-files/pg_dumps
      - ${STOQS_HOME}:/srv
      - static-files:/srv/static-files
      - media-files:/srv/media-files
    environment:
      - DATABASE_URL=postgis://${STOQSADM_USER}:${STOQSADM_PASSWORD}@${STOQS_PGHOST}:${STOQS_PGHOST_PORT}/stoqs
      - DATABASE_SUPERUSER_URL=postgis://postgres:${POSTGRES_PASSWORD}@${STOQS_PGHOST}:${STOQS_PGHOST_PORT}/stoqs
      - PGHOST=${STOQS_PGHOST}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - MAPSERVER_HOST=${MAPSERV_SERVER_NAME}
      - URL_MAPFILE_DIR=/maps
      - STATIC_URL=/static/
      - STATIC_ROOT=/srv/static-files
      - MEDIA_URL=/media/
      - MEDIA_ROOT=/srv/media-files
      - NGINX_SERVER_NAME=${NGINX_SERVER_NAME}
      - UWSGI_READ_TIMEOUT=${UWSGI_READ_TIMEOUT}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - USER=${USER}
    container_name: stoqs
    depends_on:
      - mapserver
    ports:
      - "8888:8888"
    # Expose port 8000 if PRODUCTION=false - Note: PRODUCTION=false doesn't work (March 2019)
    ##  - "8000:8000"
    env_file:
      - ./.env

  # Disable nginx service if PRODUCTION=false - Note: PRODUCTION=false doesn't work (March 2019)
  nginx:
    image: mbari/stoqs-nginx
    build:
        context: .
        dockerfile: Dockerfile-nginx
    volumes:
      - ${STOQS_VOLS_DIR}/html:/srv/html
      - ${STOQS_VOLS_DIR}/pg_dumps:/srv/media-files/pg_dumps
      - static-files:/srv/static-files
      - media-files:/srv/media-files
    environment:
      - NGINX_TMPL=${NGINX_TMPL}
    container_name: stoqs-nginx
    ports:
      - "80:80"
      - "8000:8000"
      - "443:443"
    depends_on:
      - stoqs
    env_file:
      - ./.env

  # postgres, redis, shortener services adapted from: https://github.com/adamwojt/ur_l
  postgres:
    image: postgres:${POSTGRES_TAG:-14}
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    volumes:
      - ${POSTGRES_DATA}:/var/lib/postgresql/data
      - ${POSTGRES_WALDIR}:/var/lib/postgresql/waldir
    ports:
      - ${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}
    env_file:
      - ./.env

  redis:
    image: redis:${REDIS_TAG:-latest}

  shortener:
    image: adamwojt/adamwojt:ur_l_production
    container_name: stoqs-shortener
    environment:
      - COV_FAIL_THRESHOLD=90
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:?Django Secret}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_TIMEOUT_CREATE=${CACHE_TIMEOUT_CREATE:-900}
      - CACHE_TIMEOUT_READ=${CACHE_TIMEOUT_READ:-900}
      - LOG_TOKEN_COLLISION=${LOG_TOKEN_COLLISION:-1}
      - NUM_GUNICORN_WORKERS=${NUM_GUNICORN_WORKERS:-4}
      - URL_USE_CACHE=${URL_USE_CACHE:-1}
      - NGINX_LOCATION=${NGINX_LOCATION:-/p}
    command: runserver
    depends_on:
      - postgres
      - redis
    volumes:
      - static-files:/app/staticfiles
