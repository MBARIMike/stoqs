#!/usr/bin/env bash
#
# Environment variables to be defined for a production deployment of STOQS.
#
# The initial default settings are sufficient to do a 'docker-compose up'
# and have nginx/uwsgi/stoqs served from localhost.  In order to serve
# from a public or intranet server you will need to make changes here
# as detailed in the comments for each setting.  Note that credentials and
# secret stuff will be in this file, so you should approporiately protect
# it on your system and never check the modified file into version control!
#

# STOQS_HOME: The absolute path to where the stoqs project was cloned
# - The default template setting is for a Vagrant installation: /vagrant/dev/stoqsgit, 
#   you will need to change this if you cloned the stoqs repo to a different location
STOQS_HOME=/vagrant/dev/stoqsgit

# STOQS_VOLS_DIR: Base volume directory on the host - If this is NFS mounted (as on Vagrant home dir)
# there will be problems, see: https://github.com/docker-library/postgres/issues/361#issuecomment-346562603
# - For development or production servers change this to a more permanent location than /tmp/docker_stoqs_vols
#   To make things simpler to manage on a development system set POSTGRES_* vars below to the same parent dir
STOQS_VOLS_DIR=/tmp/docker_stoqs_vols

# POSTGRES_DATA and POSTGRES_WALDIR: Locations for the permanent database files
# - Main data files and write ahead log variables exist for putting on separate volumes
#   On production and development servers change to a more permanent location
POSTGRES_DATA=/tmp/docker_stoqs_vols/pgdata
POSTGRES_WALDIR=/tmp/docker_stoqs_vols/pg_waldir

# On MacOS Docker volume mounts are done using host user id permissions:
# - Set HOST_UID=<result of `id -u`> and uncomment
# - Uncomment '##user: ${HOST_UID}' line in docker-compose.yml
#   (If you have a problem with stoqs-postgis failing on docker restart make
#    sure that 'user: ${HOST_UID}' is uncommented in docker-compose.yml.)
##HOST_UID=

# CAMPAIGNS_MODULE: Set to the python module that contains the campaigns to serve
# e.g. stoqs/mbari_campaigns.py
##CAMPAIGNS_MODULE=stoqs/mbari_campaigns.py

# Set to false to start Django's development server in the stoqs container 
# - If set to false also need to edit docker-compose.yml to disable nginx service, etc.
# - Note: PRODUCTION=false operation does not work as of March 2019
# Set to true to start uwsgi in the stoqs container, having it served by the nginx container
PRODUCTION=true

# Django's DEBUG should be set to false in production so that 500 pages are returned on error
DJANGO_DEBUG=false

# Nginx template file - use other than default for special servers like stoqs.mbari.org
NGINX_TMPL=nginx.tmpl

# Timout in seconds for backend server - suggest 5 minutes for big data requests
UWSGI_READ_TIMEOUT=300

# Name and email where error reports will be sent
# e.g. DJANGO_ADMINS=Full Name <email-with-name@example.com>,anotheremailwithoutname@example.com
##DJANGO_ADMINS=Admin User <root@localhost>
##EMAIL_USE_TLS=True
##EMAIL_HOST=mbarimail.mbari.org
##EMAIL_PORT=587
##EMAIL_HOST_USER=
##EMAIL_HOST_PASSWORD=

# A default Docker installation provides a postgis service on host stoqs-postgis
# - Change this to use another database server, e.g.: kraken.shore.mbari.org
# - If a remote postgis server is used then the postgis service in docker-compose.yml should be removed
STOQS_PGHOST=stoqs-postgis

# Port that the STOQS_PGHOST serves its postgis database from, the default is 5432
# - Change this if STOQS_PGHOST serves postgis from a different port, e.g.: 5433
STOQS_PGHOST_PORT=5432

# POSTGRES_PASSWORD: Desired password for the super user in Postgres
# - On initial container execution the postgres account will be created
#   with this password.  To recreate the postgres account and all the postgres 
#   databases remove the $STOQS_VOLS_DIR/pgdata directory and all its contents.
#   * This is a destructive operation that WILL REMOVE ANY DATA THAT YOU HAVE LOADED!
POSTGRES_PASSWORD=changeme

# STOQSADM_*: Desired role/password for the 'stoqsadm' user in Postgres
# - This Postgres account is used for loading data into the database
STOQSADM_USER=stoqsadm
STOQSADM_PASSWORD=CHANGEME

# For Django's database connection string and security
DJANGO_SECRET_KEY=change_this_text_to_some_set_of_random_characters

# Library locations as provided in base image for Dockerfile-stoqs
GEOS_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/libgeos_c.so
# GEOS_LIBRARY_PATH=/usr/lib/aarch64-linux-gnu/libgeos_c.so     # Use for Mac M1/M2
GDAL_LIBRARY_PATH=/usr/lib/libgdal.so

# MAPSERV_SERVER_NAME: publicly accesible host name, used for MAPSERVER_HOST
# - On a public server make this a literal name, e.g.: stoqs.mbari.org
# - An nginx proxy_pass makes it so that this should be the same as NGINX_SERVER_NAME
MAPSERV_SERVER_NAME=localhost

# Mount point in the stoqs service to share mapfiles with the mapserver service
MAPFILE_DIR=/maps
# Mount point in the mapserver service to share mapfiles with the stoqs service
URL_MAPFILE_DIR=/maps

# NGINX_SERVER_NAME used in nginx*.tmpl
# - On a public/intranet server make this a literal name, e.g.: stoqs.mbari.org
NGINX_SERVER_NAME=localhost

# The NGINX_CRT and NGINX_KEY NAMEs match files that end in '.crt' & '.key'
# - If you are concerned about having a cert in a Docker image you may
#   want to run nginx on the machine so that you can have tighter control.
# - Self-signed localhost.crt and localhost.key are provided for initial
#   installation testing purposes.
NGINX_CRT_NAME=localhost
NGINX_KEY_NAME=localhost

